#ifndef SPGATE_H
#define SPGATE_H

/// @file SpGate.h
/// @brief SpGate のヘッダファイル
/// @author Yusuke Matsunaga (松永 裕介)
///
/// Copyright (C) 2016 Yusuke Matsunaga
/// All rights reserved.


#include "SimPrim.h"


BEGIN_NAMESPACE_YM_SATPG_FSIM

//////////////////////////////////////////////////////////////////////
/// @class SpGate SpGate.h
/// @brief 多入力ゲートの基底クラス
//////////////////////////////////////////////////////////////////////
class SpGate :
  public SimPrim
{
protected:

  /// @brief コンストラクタ
  SpGate(const vector<SimPrim*>& fanins);

  /// @brief デストラクタ
  virtual
  ~SpGate();


protected:
  //////////////////////////////////////////////////////////////////////
  // 継承クラスから呼ばれる関数
  //////////////////////////////////////////////////////////////////////

  /// @brief ファンイン数を得る．
  ymuint
  _fanin_num() const;

  /// @brief pos 番めのファンインを得る．
  PackedVal
  _fanin_val(ymuint pos) const;


private:
  //////////////////////////////////////////////////////////////////////
  // データメンバ
  //////////////////////////////////////////////////////////////////////

  // 入力数
  ymuint mFaninNum;

  // ファンインのポインタの配列
  SimPrim** mFanins;

};


//////////////////////////////////////////////////////////////////////
/// @class SpGate1 SpGate.h
/// @brief 1入力ゲートの基底クラス
//////////////////////////////////////////////////////////////////////
class SpGate1 :
  public SimPrim
{
protected:

  /// @brief コンストラクタ
  SpGate1(const vector<SimPrim*>& fanins);

  /// @brief デストラクタ
  virtual
  ~SpGate1();


protected:
  //////////////////////////////////////////////////////////////////////
  // 継承クラスから呼ばれる関数
  //////////////////////////////////////////////////////////////////////

  /// @brief ファンインの値を得る．
  PackedVal
  _fanin_val() const;


private:
  //////////////////////////////////////////////////////////////////////
  // データメンバ
  //////////////////////////////////////////////////////////////////////

  // ファンインのポインタ
  SimPrim* mFanin;

};


//////////////////////////////////////////////////////////////////////
/// @class SpGate2 SpGate.h
/// @brief 2入力ゲートの基底クラス
//////////////////////////////////////////////////////////////////////
class SpGate2 :
  public SimPrim
{
protected:

  /// @brief コンストラクタ
  SpGate2(const vector<SimPrim*>& fanins);

  /// @brief デストラクタ
  virtual
  ~SpGate2();


protected:
  //////////////////////////////////////////////////////////////////////
  // 継承クラスから呼ばれる関数
  //////////////////////////////////////////////////////////////////////

  /// @brief pos 番めのファンインの値を得る．
  PackedVal
  _fanin_val(ymuint pos) const;


private:
  //////////////////////////////////////////////////////////////////////
  // データメンバ
  //////////////////////////////////////////////////////////////////////

  // ファンインのポインタの配列
  SimPrim* mFanins[2];

};


//////////////////////////////////////////////////////////////////////
/// @class SpGate3 SpGate.h
/// @brief 3入力ゲートの基底クラス
//////////////////////////////////////////////////////////////////////
class SpGate3 :
  public SimPrim
{
protected:

  /// @brief コンストラクタ
  SpGate3(const vector<SimPrim*>& fanins);

  /// @brief デストラクタ
  virtual
  ~SpGate3();


protected:
  //////////////////////////////////////////////////////////////////////
  // 継承クラスから呼ばれる関数
  //////////////////////////////////////////////////////////////////////

  /// @brief pos 番めのファンインの値を得る．
  PackedVal
  _fanin_val(ymuint pos) const;


private:
  //////////////////////////////////////////////////////////////////////
  // データメンバ
  //////////////////////////////////////////////////////////////////////

  // ファンインの値のポインタの配列
  SimPrim* mFanins[3];

};


//////////////////////////////////////////////////////////////////////
/// @class SpGate4 SpGate.h
/// @brief 4入力ゲートの基底クラス
//////////////////////////////////////////////////////////////////////
class SpGate4 :
  public SimPrim
{
protected:

  /// @brief コンストラクタ
  SpGate4(const vector<SimPrim*>& inputs);

  /// @brief デストラクタ
  virtual
  ~SpGate4();


protected:
  //////////////////////////////////////////////////////////////////////
  // 継承クラスから呼ばれる関数
  //////////////////////////////////////////////////////////////////////

  /// @brief pos 番めのファンインの値を得る．
  PackedVal
  _fanin_val(ymuint pos) const;


private:
  //////////////////////////////////////////////////////////////////////
  // データメンバ
  //////////////////////////////////////////////////////////////////////

  // ファンインのポインタの配列
  SimPrim* mFanins[4];

};


//////////////////////////////////////////////////////////////////////
// インライン関数の定義
//////////////////////////////////////////////////////////////////////

// @brief ファンイン数を得る．
inline
ymuint
SpGate::_fanin_num() const
{
  return mFaninNum;
}

// @brief pos 番めのファンインの値を得る．
inline
PackedVal
SpGate::_fanin_val(ymuint pos) const
{
  return mFanins[pos]->val();
}

// @brief ファンインの値を得る．
inline
PackedVal
SpGate1::_fanin_val() const
{
  return mFanin->val();
}

// @brief pos 番めのファンインの値を得る．
inline
PackedVal
SpGate2::_fanin_val(ymuint pos) const
{
  return mFanins[pos]->val();
}

// @brief pos 番めのファンインの値を得る．
inline
PackedVal
SpGate3::_fanin_val(ymuint pos) const
{
  return mFanins[pos]->val();
}

// @brief pos 番めのファンインの値を得る．
inline
PackedVal
SpGate4::_fanin_val(ymuint pos) const
{
  return mFanins[pos]->val();
}

END_NAMESPACE_YM_SATPG_FSIM

#endif // SPGATE_H
