#ifndef SPOR_H
#define SPOR_H

/// @file SpOr.h
/// @brief SpOr のヘッダファイル
/// @author Yusuke Matsunaga (松永 裕介)
///
/// Copyright (C) 2016 Yusuke Matsunaga
/// All rights reserved.


#include "SpGate.h"


BEGIN_NAMESPACE_YM_SATPG_FSIM

//////////////////////////////////////////////////////////////////////
/// @class SpOr SpOr.h
/// @brief ORノード
//////////////////////////////////////////////////////////////////////
class SpOr :
  public SpGate
{
public:

  /// @brief コンストラクタ
  SpOr(const vector<SimPrim*>& fanins);

  /// @brief デストラクタ
  virtual
  ~SpOr();


public:
  //////////////////////////////////////////////////////////////////////
  // 2値版の故障シミュレーション用の仮想関数
  //////////////////////////////////////////////////////////////////////

  /// @brief 正常値の計算を行う．(2値版)
  virtual
  PackedVal
  _calc_val();

  /// @brief ゲートの入力から出力までの可観測性を計算する．(2値版)
  virtual
  PackedVal
  _calc_gobs(ymuint ipos);

};


//////////////////////////////////////////////////////////////////////
/// @class SpOr2 SpOr.h
/// @brief 2入力ORノード
//////////////////////////////////////////////////////////////////////
class SpOr2 :
  public SpGate2
{
public:

  /// @brief コンストラクタ
  SpOr2(const vector<SimPrim*>& fanins);

  /// @brief デストラクタ
  virtual
  ~SpOr2();


public:
  //////////////////////////////////////////////////////////////////////
  // 2値版の故障シミュレーション用の仮想関数
  //////////////////////////////////////////////////////////////////////

  /// @brief 正常値の計算を行う．(2値版)
  virtual
  PackedVal
  _calc_val();

  /// @brief ゲートの入力から出力までの可観測性を計算する．(2値版)
  virtual
  PackedVal
  _calc_gobs(ymuint ipos);

};


//////////////////////////////////////////////////////////////////////
/// @class SpOr3 SpOr.h
/// @brief 3入力ORノード
//////////////////////////////////////////////////////////////////////
class SpOr3 :
  public SpGate3
{
public:

  /// @brief コンストラクタ
  SpOr3(const vector<SimPrim*>& fanins);

  /// @brief デストラクタ
  virtual
  ~SpOr3();


public:
  //////////////////////////////////////////////////////////////////////
  // 2値版の故障シミュレーション用の仮想関数
  //////////////////////////////////////////////////////////////////////

  /// @brief 正常値の計算を行う．(2値版)
  virtual
  PackedVal
  _calc_val();

  /// @brief ゲートの入力から出力までの可観測性を計算する．(2値版)
  virtual
  PackedVal
  _calc_gobs(ymuint ipos);

};


//////////////////////////////////////////////////////////////////////
/// @class SpOr4 SpOr.h
/// @brief 4入力ORノード
//////////////////////////////////////////////////////////////////////
class SpOr4 :
  public SpGate4
{
public:

  /// @brief コンストラクタ
  SpOr4(const vector<SimPrim*>& fanins);

  /// @brief デストラクタ
  virtual
  ~SpOr4();


public:
  //////////////////////////////////////////////////////////////////////
  // 2値版の故障シミュレーション用の仮想関数
  //////////////////////////////////////////////////////////////////////

  /// @brief 正常値の計算を行う．(2値版)
  virtual
  PackedVal
  _calc_val();

  /// @brief ゲートの入力から出力までの可観測性を計算する．(2値版)
  virtual
  PackedVal
  _calc_gobs(ymuint ipos);

};


//////////////////////////////////////////////////////////////////////
/// @class SpNor SpOr.h
/// @brief NORノード
//////////////////////////////////////////////////////////////////////
class SpNor :
  public SpOr
{
public:

  /// @brief コンストラクタ
  SpNor(const vector<SimPrim*>& fanins);

  /// @brief デストラクタ
  virtual
  ~SpNor();


public:
  //////////////////////////////////////////////////////////////////////
  // 2値版の故障シミュレーション用の仮想関数
  //////////////////////////////////////////////////////////////////////

  /// @brief 正常値の計算を行う．(2値版)
  virtual
  PackedVal
  _calc_val();

};


//////////////////////////////////////////////////////////////////////
/// @class SpNor2 SpOr.h
/// @brief 2入力NORノード
//////////////////////////////////////////////////////////////////////
class SpNor2 :
  public SpOr2
{
public:

  /// @brief コンストラクタ
  SpNor2(const vector<SimPrim*>& fanins);

  /// @brief デストラクタ
  virtual
  ~SpNor2();


public:
  //////////////////////////////////////////////////////////////////////
  // 2値版の故障シミュレーション用の仮想関数
  //////////////////////////////////////////////////////////////////////

  /// @brief 正常値の計算を行う．(2値版)
  virtual
  PackedVal
  _calc_val();

};


//////////////////////////////////////////////////////////////////////
/// @class SpNor3 SpOr.h
/// @brief 3入力NORノード
//////////////////////////////////////////////////////////////////////
class SpNor3 :
  public SpOr3
{
public:

  /// @brief コンストラクタ
  SpNor3(const vector<SimPrim*>& fanins);

  /// @brief デストラクタ
  virtual
  ~SpNor3();


public:
  //////////////////////////////////////////////////////////////////////
  // 2値版の故障シミュレーション用の仮想関数
  //////////////////////////////////////////////////////////////////////

  /// @brief 正常値の計算を行う．(2値版)
  virtual
  PackedVal
  _calc_val();

};


//////////////////////////////////////////////////////////////////////
/// @class SpNor2 SpOr.h
/// @brief 2入力NORノード
//////////////////////////////////////////////////////////////////////
class SpNor4 :
  public SpOr4
{
public:

  /// @brief コンストラクタ
  SpNor4(const vector<SimPrim*>& fanins);

  /// @brief デストラクタ
  virtual
  ~SpNor4();


public:
  //////////////////////////////////////////////////////////////////////
  // 2値版の故障シミュレーション用の仮想関数
  //////////////////////////////////////////////////////////////////////

  /// @brief 正常値の計算を行う．(2値版)
  virtual
  PackedVal
  _calc_val();

};

END_NAMESPACE_YM_SATPG_FSIM

#endif // SPOR_H
